
DROP DATABASE SURESH;
-- DROP SCHEMA SURESH;
-- DROP SCHEMA IF EXISTS SURESH;
-- PRIMARY KEY IS MUST(UNIQUE)
-- USE SYS;
-- SHOW TABLES;
CREATE DATABASE SURESH;
USE SURESH;
CREATE TABLE STUDENT(
ID INT PRIMARY KEY,
NAME VARCHAR(30),
GPA DECIMAL(3,2)
);
-- DESCRIBE STUDENT;
DROP TABLE STUDENT;
-- -- ALTER TABLE STUDENT ADD DEPARMENT VARCHAR(10);
-- -- ALTER TABLE STUDENT DROP column DEPARMENT;

-- INSERT INTO STUDENT VALUES(1,"SURESH",9.9);
-- INSERT INTO STUDENT VALUES(2,"SURESH",9.9);
-- INSERT INTO STUDENT VALUES(3,"SURESH",9.9);
-- INSERT INTO STUDENT VALUES(4,"SURESH",8.5),(5,"NAVIN",8.8);
-- INSERT INTO STUDENT (ID,NAME) VALUES(7,"SUR");

-- SELECT * FROM STUDENT;
-- SELECT NAME,ID FROM STUDENT;
USE SURESH;
CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY,
EMPNAME VARCHAR(30),
JOB_DESC VARCHAR(20),
SALARY INT,
HireDate varchar(30)
);
INSERT INTO EMPLOYEE VALUES
(1,"SUR","SOFTWARE",1000,"13-04-2002"),
(2,"NAVIN","SOFTWARE",20000,"2002-04-02"),
(3,"SURYA","SOFTWARE",30000,"13-06-2002"),
(4,"SURESH","SOFTWARE",50000,"13-07-2002"),
(5,"VICKY","SOFTWARE",30000,"13-08-2002"),
(6,"SOUNDAR","SOFTWARE",6000,"13-09-2002");
-- DESCRIBE TABLE EMPLOYEE;
SELECT *FROM EMPLOYEE WHERE EMPiD>4;
select *from EMPLOYEE WHERE EMPNAME>="SURESH";
SELECT *FROM EMPLOYEE WHERE SALARY<50000 AND SALARY>2000 AND EMPiD<3;
select *FROM EMPLOYEE 
WHERE JOB_DESC NOT IN("SOFTWARE") ;
SELECT *FROM EMPLOYEE
WHERE SALARY BETWEEN 2000 AND 30000;
select *FROM EMPLOYEE
WHERE SALARY <10000 LIMIT 1;
select *FROM EMPLOYEE
WHERE EMPNAME LIKE '__R%';
 select *FROM EMPLOYEE
WHERE EMPNAME LIKE '__R%';
SELECT *FROM EMPLOYEE;
 -- UPDATE EMPLOYEE
--  SET JOB_DESC="EEE";
 SELECT *FROM EMPLOYEE;
 -- DELETE FROM EMPLOYEE where EMPiD=4;
 select *from employee;
 select DISTINCT JOB_DESC
 FROM EMPLOYEE;
 
 -- ORDERBY
 select *FROM EMPLOYEE 
 ORDER BY SALARY DESC;
 select *FROM EMPLOYEE
 ORDER BY  salary desc,empname;
 select *FROM EMPLOYEE
 where empname like 's%' order by salary;
 select *from employee
 order by(CASE EMPNAME
 WHEN EMPNAME LIKE 'S%' THEN 1
 ELSE 100 END
 );
 -- function in SQL
 -- MATH FUNCTION
 select COUNT(*) TOTAL FROM EMPLOYEE;
  SELECT COUNT(*) TOTALSOFTWARE FROM EMPLOYEE
WHERE JOB_DESC="SOFTWARE";
  SELECT SUM(SALARY) FROM EMPLOYEE;
  SELECT AVG(SALARY) FROM EMPLOYEE;
  SELECT MIN(SALARY) FROM EMPLOYEE;
  select MAX(SALARY) FROM EMPLOYEE;
  -- STRING FUNCTION
   
   select ucase(EMPNAME)names FROM EMPLOYEE; -- alias name
   select empname,char_length(empname)charcount from employee;
   select empname,concat("Rs.",format(salary,0))salary from employee;
   select  empname,right(job_desc,3) from employee;
   
   -- date functions
-- alter Table employee add column HireDate Date;
select *from employee;

select now();
 select date(now());
 select curdate();
 select date_format(curdate(),"%D-%M-%y") as date;
 select datediff(curdate(),"2021/04/05") as diff;
 select date_add(curdate(),interval 1 year) as 'after one day';
 
 -- GROUP BY ,HAVING
 SELECT *FROM EMPLOYEE
 order by JOB_DESC;
  SELECT JOB_DESC,avg(SALARY) FROM EMPLOYEE
  GROUP bY JOB_DESC;
  SELECT JOB_DESC,COUNT(EMPID) FROM EMPLOYEE
  GROUP bY JOB_DESC;
  SELECT JOB_DESC,count(SALARY) FROM EMPLOYEE
  GROUP bY JOB_DESC HAVING count(SALARY)>1 ORDER BY jOB_DESC;
  -- WHERE FILTER ROWS
  -- HAVING FILTER GROUPS
  SELECT JOB_DESC,count(SALARY) FROM EMPLOYEE where SALARY>1000
  GROUP bY JOB_DESC HAVING count(SALARY)>1 ORDER BY jOB_DESC;
  DROP TABLE EMPLOYEE;
  
  
  -- CONSTRAINTS
  CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY auto_increment ,
EMPNAME VARCHAR(30) NOT NULL,
JOB_DESC VARCHAR(20) DEFAULT 'UNASSIGNED',
SALARY INT,
PAN VARCHAR(10) UNIQUE,
CHECK(SALARY>10000)
);
INSERT INTO EMPLOYEE (EMPNAME,SALARY) VALUES("sURESH",20000);
SELECT *FROM EMPLOYEE;
DROP TABLE EMPLOYEE;


CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY,
EMPNAME VARCHAR(30),
JOB_DESC VARCHAR(20),
SALARY INT,
HireDate varchar(30)
);
-- ADD NOT NUL CONSTRAINT
ALTER TABLE EMPLOYEE
MODIFY EMPNAME varchar(30) NOT NULL;
-- DROP NOT NULL CONSTRAINT
ALTER TABLE EMPLOYEE
MODIFY EMPNAME varchar(30);
-- ADD DEFAULT CONSTRAINT
ALTER TABLE EMPLOYEE
ALTER JOB_DESC SET DEFAULT 'UNASSIGNED';

-- DROP DEFAULT CONSTRAINT
ALTER TABLE EMPLOYEE
ALTER JOB_DESC DROP DEFAULT;
-- ADD CHECK CONSTRAINT
ALTER TABLE EMPLOYEE
ADD CONSTRAINT CHK_SALARY CHECK (SALARY>1000);
-- DROP CHECK CONSTRAINT
ALTER TABLE EMPLOYEE
DROP CHECK CHK_SALARY;
DROP TABLE EMPLOYEE;
-- FOREIGN KEY CONSTRAINT

CREATE TABLE BRANCH(
BRANCH_ID INT PRIMARY KEY AUTO_INCREMENT,
BR_NAME VARCHAR(30) NOT NULL,
ADDR VARCHAR(200),
MANAGERID INT,
foreign key(MANAGERID) references EMPLOYEE(BRANCH_ID)
);


CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY AUTO_INCREMENT,
EMPNAME VARCHAR(30),
JOB_DESC VARCHAR(20),
SALARY INT,
BRANCH_ID INT,
CONSTRAINT FK_BRANCHID FOREIGN KEY(BRANCH_ID) references BRANCH(BRANCH_ID)
);

ALTER TABLE EMPLOYEE DROP foreign key FK_BRANCHID;
SELECT *FROM EMPLOYEE;
SELECT *FROM BRANCH;
DROP TABLE EMPLOYEE;


-- INDEX KEY
 CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY auto_increment ,
EMPNAME VARCHAR(30) NOT NULL,
JOB_DESC VARCHAR(20) DEFAULT 'UNASSIGNED',
SALARY INT,
PAN VARCHAR(10) UNIQUE,
CHECK(SALARY>10000)
);
SHOW INDEX FROM EMPLOYEE;
CREATE INDEX NAME_INDEX ON EMPLOYEE(EMPNAME);
SELECT *FROM EMPLOYEE;
ALTER TABLE EMPLOYEE DROP INDEX NAME_INDEX;
ALTER TABLE EMPLOYEE
ADD INDEX(EMPNAME);
DROP TABLE EMPLOYEE;
DROP TABLE BRANCH;
-- ON DELETE

CREATE TABLE BRANCH(
BRANCH_ID INT PRIMARY KEY AUTO_INCREMENT,
BR_NAME VARCHAR(30) NOT NULL,
ADDR VARCHAR(200)
);
CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY AUTO_INCREMENT,
EMPNAME VARCHAR(30) NOT NULL,
JOB_DESC VARCHAR(20),
SALARY INT,
BRANCH_ID INT,
CONSTRAINT FK_BRANCHID FOREIGN KEY(BRANCH_ID) references BRANCH(BRANCH_ID)
ON DELETE  cascade -- CASCADE OR set NULL
);
DROP TABLE EMPLOYEE;
DROP TABLE BRANCH;
INSERT INTO BRANCH VALUES(3,"CHENNAI","16 ABC ROAD");
INSERT INTO BRANCH VALUES(2,"MADURAI","12 ANNA ROAD");
INSERT INTO BRANCH VALUES(1,"CHENNAI","16 MAIN ROAD");
INSERT INTO BRANCH VALUES(4,"BENGALURU","10 GANDHI ROAD");

INSERT INTO EMPLOYEE VALUES(1,"SURESH",'mANAGER',250000,3);
INSERT INTO EMPLOYEE VALUES(2,"NAVIN",'SALES',2500000,4);
INSERT INTO EMPLOYEE VALUES(3,"SURYA",'mANAGER',300000,2);
INSERT INTO EMPLOYEE VALUES(4,"RANJITH",'SALES',100000,1);
INSERT INTO EMPLOYEE VALUES(5,"JEBIN",'HR',50000,2);
INSERT INTO EMPLOYEE VALUES(6,"SURESH",'ENGINEER',500000,4);

SELECT *FROM BRANCH;
SELECT *FROM EMPLOYEE;
 DELETE FROM BRANCH where BRANCH_ID=1;
 
 -- JOINS
 
 CREATE TABLE BRANCH(
BRANCH_ID INT PRIMARY KEY AUTO_INCREMENT,
BR_NAME VARCHAR(30) NOT NULL,
ADDR VARCHAR(200)
);

CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY AUTO_INCREMENT,
EMPNAME VARCHAR(30) NOT NULL,
JOB_DESC VARCHAR(20),
SALARY INT,
BRANCH_ID INT,
CONSTRAINT FK_BRANCHID FOREIGN KEY(BRANCH_ID) references BRANCH(BRANCH_ID)
);
 
 INSERT INTO BRANCH VALUES(3,"CHENNAI","16 ABC ROAD");
INSERT INTO BRANCH VALUES(2,"MADURAI","12 ANNA ROAD");
INSERT INTO BRANCH VALUES(1,"CHENNAI","16 MAIN ROAD");
INSERT INTO BRANCH VALUES(4,"BENGALURU","10 GANDHI ROAD");

INSERT INTO EMPLOYEE VALUES(1,"SURESH",'mANAGER',250000,3);
INSERT INTO EMPLOYEE VALUES(2,"NAVIN",'SALES',2500000,4);
INSERT INTO EMPLOYEE VALUES(3,"SURYA",'mANAGER',300000,2);
INSERT INTO EMPLOYEE VALUES(4,"RANJITH",'SALES',100000,1);
INSERT INTO EMPLOYEE VALUES(5,"JEBIN",'HR',50000,2);
INSERT INTO EMPLOYEE VALUES(6,"SURESH",'ENGINEER',500000,4);
 SELECT *FROM EMPLOYEE;
 SELECT *FROM BRANCH;

select E.EMPID,E.EMPNAME,E.JOB_DESC,E.SALARY,B.BR_NAME
FROM EMPLOYEE AS E
 JOIN BRANCH AS B-- INNER JOIN -- JOIN -- RIGHT LEFT
ON E.BRANCH_ID=B.BRANCH_ID
ORDER BY EMPID;

select EMPLOYEE.EMPID,EMPLOYEE.EMPNAME,EMPLOYEE.JOB_DESC,EMPLOYEE.SALARY,BRANCH.BR_NAME
FROM EMPLOYEE ,BRANCH 
WHERE EMPLOYEE.BRANCH_ID=BRANCH.BRANCH_ID;

select EMPLOYEE.EMPID,EMPLOYEE.EMPNAME,EMPLOYEE.JOB_DESC,EMPLOYEE.SALARY,BRANCH.BR_NAME
FROM EMPLOYEE 
CROSS JOIN BRANCH;

-- BRNAME EMP_COUNT
SELECT B.BR_NAME,count(E.EMPID)NO_OF_EMP
FROM BRANCH AS B
JOIN EMPLOYEE AS E
ON B.BRANCH_ID=E.BRANCH_ID
GROUP BY E.BRANCH_ID;
DROP TABLE EMPLOYEE;
DROP TABLE BRANCH;
 -- UNION
 
 CREATE TABLE BRANCH(
BRANCH_ID INT PRIMARY KEY AUTO_INCREMENT,
BR_NAME VARCHAR(30) NOT NULL,
ADDR VARCHAR(200)
);

 CREATE TABLE CLIENTS(
 CLIENTID INT PRIMARY key auto_increment,
 LOCATION VARCHAR(30) NOT NULL,
 ADDR VARCHAR(30));
 
 
 INSERT INTO BRANCH VALUES(3,"CHENNAI","16 ABC ROAD");
INSERT INTO BRANCH VALUES(2,"MADURAI","12 ANNA ROAD");
INSERT INTO BRANCH VALUES(1,"CHENNAI","16 MAIN ROAD");
INSERT INTO BRANCH VALUES(4,"BENGALURU","10 GANDHI ROAD");

 INSERT INTO CLIENTS VALUES(1,"SIKK","19TH ROAD");
 INSERT INTO CLIENTS VALUES(2,"CHEN","20TH ROAD");
 INSERT INTO CLIENTS VALUES(3,"AMAM","21TH ROAD");
 select *FROM BRANCH
 union
 SELECT *FROM CLIENTS; -- AVOIDS DUPLICATES IN UNION -- USE UNION ALL TO AVOID THIS METHOD
 
 
 -- SUBQUERIES
 CREATE TABLE BRANCH(
BRANCH_ID INT PRIMARY KEY AUTO_INCREMENT,
BR_NAME VARCHAR(30) NOT NULL,
ADDR VARCHAR(200)
);

CREATE TABLE EMPLOYEE(
EMPiD INT PRIMARY KEY AUTO_INCREMENT,
EMPNAME VARCHAR(30) NOT NULL,
JOB_DESC VARCHAR(20),
SALARY INT,
BRANCH_ID INT,
CONSTRAINT FK_BRANCHID FOREIGN KEY(BRANCH_ID) references BRANCH(BRANCH_ID)
);
 
 INSERT INTO BRANCH VALUES(3,"CHENNAI","16 ABC ROAD");
INSERT INTO BRANCH VALUES(2,"MADURAI","12 ANNA ROAD");
INSERT INTO BRANCH VALUES(1,"CHENNAI","16 MAIN ROAD");
INSERT INTO BRANCH VALUES(4,"BENGALURU","10 GANDHI ROAD");

INSERT INTO EMPLOYEE VALUES(1,"SURESH",'mANAGER',250000,3);
INSERT INTO EMPLOYEE VALUES(2,"NAVIN",'SALES',2500000,4);
INSERT INTO EMPLOYEE VALUES(3,"SURYA",'mANAGER',300000,2);
INSERT INTO EMPLOYEE VALUES(4,"RANJITH",'SALES',100000,1);
INSERT INTO EMPLOYEE VALUES(5,"JEBIN",'HR',50000,2);
INSERT INTO EMPLOYEE VALUES(6,"SURESH",'ENGINEER',500000,4);
 SELECT *FROM EMPLOYEE;
 SELECT *FROM BRANCH;
 
 SELECT *FROM EMPLOYEE
 WHERE BRANCH_ID=(SELECT BRANCH_ID FROM BRANCH
 WHERE BR_NAME="MADURAI");
 
 -- EMPLOYEE WITH MIN SALARY
  SELECT *FROM EMPLOYEE
  WHERE SALARY=(SELECT MAX(SALARY) FROM EMPLOYEE);
  -- EXITS USED WITH SUBQUERY
  -- BRANCHES CONTAINING ATLEAST ONE ADMIN
  SELECT BRANCH_ID,BR_NAME 
  FROM BRANCH
  WHERE EXISTS(
  SELECT *FROM EMPLOYEE
  WHERE JOB_DESC="SALES" AND BRANCH.BRANCH_ID=EMPLOYEE.BRANCH_ID);
  
  -- ANY
  -- BRANCH INFO IN WHICH ANY EMPLOYEE GETS MORE THAN 10L
  SELECT *FROM BRANCH 
  WHERE BRANCH_ID=ANY(
  SELECT BRANCH_ID FROM EMPLOYEE
  WHERE SALARY>100000);
  
  -- ALL
  SELECT *FROM EMPLOYEE
  WHERE BRANCH_ID<>ALL(
  select BRANCH_ID FROM BRANCH
  WHERE BR_NAME IN ("CHENNAI","MADURAI"));
  
  -- VIEW 
  CREATE VIEW EMP_BR
  AS 
  select EMPLOYEE.EMPID,EMPLOYEE.EMPNAME,BRANCH.BRANCH_NAME
  FROM EMPLOYEE
  INNER JOIN BRANCH
  ON EMPLOYEE.BRANCH_ID=BRANCH.BRANCH_ID
  ORDER BY EMPID;
  
  SELECT *FROM EMP_BR
  WHERE JOB_DESC="MANAGER";

 











  
  

 
 

 

